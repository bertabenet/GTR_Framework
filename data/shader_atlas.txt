//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
depth quad.vs depth.fs
multi basic.vs multi.fs

light_singlepass basic.vs light_singlepass.fs
normal basic.vs normal.fs
uvs basic.vs uvs.fs
occlusion basic.vs occlusion.fs
light_multipass basic.vs light_multipass.fs
fx quad.vs fx.fs
deferred quad.vs deferred.fs
deferred_ws basic.vs deferred.fs
add_ambient quad.vs add_ambient.fs


\norm_tangent
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx( p );
	vec3 dp2 = dFdy( p );
	vec2 duv1 = dFdx( uv );
	vec2 duv2 = dFdy( uv );
	
	// solve the linear system
	vec3 dp2perp = cross( dp2, N );
	vec3 dp1perp = cross( N, dp1 );
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
	// construct a scale-invariant frame 
	float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
	return mat3( T * invmax, B * invmax, N );
}

// assume N, the interpolated vertex normal and 
// WP the world position
//vec3 normal_pixel = texture2D( normalmap, uv ).xyz; 
vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);
}

\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\uvs.fs

#version 330 core

in vec2 v_uv;

out vec4 FragColor;

void main()
{
	FragColor = vec4(v_uv, 1.0, 1.0);
}

\normal.fs

#version 330 core

in vec3 v_normal;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{	
	FragColor = vec4(abs(normalize(v_normal)), 1.0);
}

\occlusion.fs

#version 330 core
in vec2 v_uv;
uniform sampler2D u_metallic_roughness_texture;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	float occ = texture(u_metallic_roughness_texture, v_uv).x;

	FragColor = vec4(occ, occ, occ, 1.0);
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}


\light_singlepass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform vec3 u_emissive_factor;

uniform sampler2D u_texture;
uniform sampler2D u_metallic_roughness_texture;
uniform sampler2D u_emissive_texture;
uniform sampler2D u_normal_texture;

uniform float u_time;
uniform float u_alpha_cutoff;

uniform vec3 u_ambient_light;

uniform vec3 u_spot_light_pos;
uniform vec3 u_spot_direction;
uniform vec3 u_spot_color;
uniform float u_spotCosineCutoff;
uniform float u_spotExponent;
uniform float u_spot_maxdist;
uniform bool u_spot_visible;

uniform vec3 u_directional_color;
uniform vec3 u_directional_pos;
uniform float u_directional_factor;
uniform bool u_directional_visible;

uniform vec3 u_point_light_pos;
uniform vec3 u_point_color;
uniform float u_point_factor;
uniform float u_point_maxdist;
uniform bool u_point_visible;

uniform bool u_read_normal;

out vec4 FragColor;

mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx( p );
	vec3 dp2 = dFdy( p );
	vec2 duv1 = dFdx( uv );
	vec2 duv2 = dFdy( uv );
	
	// solve the linear system
	vec3 dp2perp = cross( dp2, N );
	vec3 dp1perp = cross( N, dp1 );
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
	// construct a scale-invariant frame 
	float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
	return mat3( T * invmax, B * invmax, N );
}

// assume N, the interpolated vertex normal and 
// WP the world position
//vec3 normal_pixel = texture2D( normalmap, uv ).xyz; 
vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);
}

float computeAttFactor(vec3 position, vec3 vw_pos, float maxdist)
{
	float light_distance = length(position - vw_pos );
	float att_factor = maxdist - light_distance; //compute a linear attenuation factor
	att_factor /= maxdist; //normalize factor
	att_factor = max( att_factor, 0.0 ); //ignore negative values
	return att_factor;
}


void main()
{
	vec3 N = normalize(v_normal);
	
	// NORMAL MAP
	if(u_read_normal){
		vec3 normalRGB = texture2D(u_normal_texture, v_uv).rgb;
		vec3 normal = perturbNormal(N, v_world_position, v_uv, normalRGB);
		N = normal;
	}
	
	// POINT
	vec3 point = vec3(0.0);
	if(u_point_visible){
		vec3 L = normalize( u_point_light_pos -  v_world_position );
		
		//compute distance
		float att_factor = computeAttFactor(u_point_light_pos, v_world_position, u_point_maxdist);

		//apply to amount of light
		point = clamp(dot(L, N), 0.0, 1.0) * texture(u_texture, v_uv).xyz * u_point_color * u_point_factor * att_factor; 
	}
	
	// SPOT
	vec3 spot = vec3(0.0);
	if(u_spot_visible){
		vec3 L = normalize( u_spot_light_pos -  v_world_position );
		vec3 D = normalize(u_spot_direction);
		float spotCosine = dot(D,-L);
		float spotFactor = 0.0;
		if (spotCosine >= u_spotCosineCutoff) { 
			spotFactor = pow(spotCosine, u_spotExponent);
		}
		float att_factor = computeAttFactor(u_spot_light_pos, v_world_position, u_spot_maxdist);
		spot = dot(L, N) * texture(u_texture, v_uv).xyz * u_spot_color * spotFactor * att_factor;
	}
	
	// DIRECTIONAL
	vec3 directional = vec3(0.0);
	if(u_directional_visible){
		vec3 L = normalize(u_directional_pos);
		directional = dot(L, N) * texture(u_texture, v_uv).xyz * u_directional_color * u_directional_factor; 
	}
	
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	float occlusion = texture(u_metallic_roughness_texture, v_uv).x;
	vec3 light = u_ambient_light * occlusion + point + spot + directional;

	color.xyz *= light;
	
	color.xyz += u_emissive_factor * texture(u_emissive_texture, v_uv).xyz;	
	
	FragColor = color;
}


\light_multipass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform sampler2D u_normal_texture;
uniform sampler2D u_metallic_roughness_texture;
uniform sampler2D u_emissive_texture;
uniform sampler2D u_shadowmap;
uniform float u_time;
uniform float u_alpha_cutoff;

uniform vec3 u_ambient_light;
uniform vec3 u_emissive_factor;

uniform int u_light_type;
uniform vec3 u_light_position;
uniform vec3 u_light_color;
uniform vec3 u_direction;
uniform float u_spotExponent;
uniform float u_spotCosineCutoff;
uniform float u_light_factor;
uniform float u_maxdist;

uniform bool u_read_normal;
uniform bool u_have_shadows;

uniform mat4 u_shadow_viewproj;
uniform float u_shadow_bias;

out vec4 FragColor;

#include "norm_tangent"

void main()
{

	vec3 L = normalize( u_light_position -  v_world_position );
	vec3 N = normalize(v_normal);
	
	float occlusion = texture(u_metallic_roughness_texture, v_uv).x;
	vec3 light = u_ambient_light * occlusion;

	
	// NORMAL MAP
	if(u_read_normal){
		vec3 normalRGB = texture2D(u_normal_texture, v_uv).rgb;
		vec3 normal = perturbNormal(N, v_world_position, v_uv, normalRGB);
		N = normal;
	}
	
	//compute distance
	float light_distance = length(u_light_position - v_world_position );
	float att_factor = u_maxdist - light_distance; //compute a linear attenuation factor
	att_factor /= u_maxdist; //normalize factor
	att_factor = max( att_factor, 0.0 ); //ignore negative values
	
	// POINT (type 1)
	if(u_light_type == 1){
		//apply to amount of light
		vec3 point = clamp(dot(L, N), 0.0, 1.0) * u_light_color * u_light_factor * att_factor; 
		light += point;
	}
	
	// SPOT (type 2)
	if(u_light_type == 2){
		L = normalize( u_light_position -  v_world_position );
		vec3 D = normalize(u_direction);
		float spotCosine = dot(D,-L);
		float spotFactor = 0.0;
		if (spotCosine >= u_spotCosineCutoff) { 
			spotFactor = pow(spotCosine, u_spotExponent);
		}
		vec3 spot = dot(L, N) * u_light_color * spotFactor * att_factor;
		light += spot;
	}
	
	// DIRECTIONAL (type 3)
	if(u_light_type == 3){
		L = normalize(u_light_position);
		vec3 directional = dot(L, N) * u_light_color * u_light_factor; 
		light += directional;
	}
	
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;
		
	color.xyz *= light;
	
	color.xyz += u_emissive_factor * texture(u_emissive_texture, v_uv).xyz;	
	
	
	// SHADOWMAPS
	float shadow_factor = 1.0;

	if(u_have_shadows){
		vec4 proj_pos = u_shadow_viewproj * vec4(v_world_position, 1.0);
		vec2 shadow_uv = proj_pos.xy / proj_pos.w;
		shadow_uv = shadow_uv * 0.5 + vec2(0.5);
		
		float real_depth = (proj_pos.z - u_shadow_bias) / proj_pos.w;
		real_depth = real_depth * 0.5 + 0.5;
		float shadow_depth = texture( u_shadowmap, shadow_uv).x;
		
		if( shadow_depth < real_depth )
			shadow_factor = 0.0;
		
		if(real_depth < 0.0 || real_depth > 1.0)
			shadow_factor =  1.0;
		
		if(u_light_type == 3){
			if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 || shadow_uv.y < 0.0 || shadow_uv.y > 1.0 )
				shadow_factor = 1.0;
		}
		
	}
	
	color.xyz *= shadow_factor;
	
	FragColor = color;
}


\fx.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;
uniform float u_time;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = texture( u_texture, v_uv );
	color = vec4(1.0) - color;

	FragColor = color;
}


\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform sampler2D u_normal_texture;
uniform sampler2D u_mat_properties_texture;
uniform float u_time;
uniform float u_alpha_cutoff;
uniform bool u_read_normal;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalMapColor;
layout(location = 2) out vec4 ExtraColor;

#include "norm_tangent"

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );
	
	vec4 material_properties = texture2D(u_mat_properties_texture, v_uv);
	
	vec3 N;
	if(u_read_normal){
		vec3 normal_pixel = texture2D(u_normal_texture, v_uv).xyz;
		N = perturbNormal(v_normal, v_world_position, v_uv, normal_pixel);
	}
	else N = normalize(v_normal);

	if(color.a < u_alpha_cutoff)
		discard;


	FragColor = color;
	NormalMapColor = vec4(N*0.5 + vec3(0.5),1.0);
	ExtraColor = material_properties;
	
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}


\deferred.fs

#version 330 core

uniform sampler2D u_color_texture;
uniform sampler2D u_normal_texture;
uniform sampler2D u_extra_texture;
uniform sampler2D u_depth_texture;
uniform mat4 u_inverse_viewprojection;
uniform vec2 u_iRes;

//uniform vec3 u_light_pos;
//uniform vec4 u_light_info;

uniform vec3 u_ambient_light;
uniform vec3 u_emissive_factor;

uniform int u_light_type;
uniform vec3 u_light_position;
uniform vec3 u_light_color;
uniform vec3 u_direction;
uniform float u_spotExponent;
uniform float u_spotCosineCutoff;
uniform float u_light_factor;
uniform float u_maxdist;

//pass here all the uniforms required for illumination...
out vec4 FragColor;

void main()
{
	//extract uvs from pixel screenpos
	vec2 uv = gl_FragCoord.xy * u_iRes.xy; 
	vec3 color = texture( u_color_texture, uv ).xyz;
	float occlusion = texture(u_extra_texture, uv).x;
	
	//normals must be converted from 0..1 to -1..+1
	vec3 N = texture( u_normal_texture, uv ).xyz * 2.0 - 1.0;
	//N = clamp(normalize(N), 0.0, 10.0); //always normalize in case of data loss
	//N = max(normalize(N), 0.0);
	
	//reconstruct world position from depth and inv. viewproj
	float depth = texture( u_depth_texture, uv ).x;
	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;
	
	//now do your illumination using worldpos and the normal...
	vec3 light = u_ambient_light * occlusion;
	
	vec3 L = normalize( u_light_position -  worldpos );
	
	//compute distance
	float light_distance = length(u_light_position - worldpos );
	float att_factor = u_maxdist - light_distance; //compute a linear attenuation factor
	att_factor /= u_maxdist; //normalize factor
	att_factor = max( att_factor, 0.0 ); //ignore negative values
	
	// POINT (type 1)
	if(u_light_type == 1){
		//apply to amount of light
		vec3 point = clamp(dot(L, N), 0.0, 1.0) * u_light_color * u_light_factor * att_factor; 
		light += point;
	}
	
	// SPOT (type 2)
	if(u_light_type == 2){
		L = normalize( u_light_position -  worldpos );
		vec3 D = normalize(u_direction);
		float spotCosine = dot(D,-L);
		float spotFactor = 0.0;
		if (spotCosine >= u_spotCosineCutoff) { 
			spotFactor = pow(spotCosine, u_spotExponent);
		}
		vec3 spot = dot(L, N) * u_light_color * spotFactor * att_factor;
		light += spot;
	}
	
	// DIRECTIONAL (type 3)
	if(u_light_type == 3){
		L = normalize(u_light_position);
		vec3 directional = dot(L, N) * u_light_color * u_light_factor; 
		light += directional;
	}


	color *= light;
	
	FragColor = vec4(color, 1.0);
}

\add_ambient.fs

#version 330 core

in vec2 v_uv;

uniform vec3 u_ambient_light;
uniform sampler2D u_color_texture;

//pass here all the uniforms required for illumination...
out vec4 FragColor;

void main()
{
	
	vec4 color = texture2D(u_color_texture, v_uv);
	color *= vec4(u_ambient_light, 1.0);
	
	FragColor = color;

}
